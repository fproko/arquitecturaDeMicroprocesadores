Preguntas orientadoras
=======================

1. Describa brevemente los diferentes perfiles de familias de microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias características.

    Existen 3 clasificaciones de la familia ARM: 

    * Cortex A (Application): son procesadores de alto rendimiento orientados a la implementación de sistemas operativos en sistemas embebidos de alta performance. Se encuentra en celulares, tablets, etc. 
    
    * Cortex R (Real time): son procesadores orientados a sistemas de tiempo real donde se necesita implementar soluciones de baja latencia y alta capacidad de procesamiento.
    
    * Cortex M (Microcontrollers): son procesadores optimizados para circuitos integrados de bajo costo y eficiencia energética.

Cortex M
========

1. Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y M4.

    *Cortex M0 / M0+: Implementación mínima para bajo consumo y bajo costo. Arquitectura Von Neumann (ARMv6-M). 

    *Cortex M3: Microcontrolador de propósito general. Arquitectura Harvard (ARMv7-M).

    *Cortex M4: Mayor performance, ejecución de instrucciones de punto flotante, agregan funcionalidades para procesamiento digital de señales, unidad de protección de memoria, etc. Arquitectura Harvard (ARMv7E-M).
    
2. ¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código? Explique.
    
    Originalmente los procesadores ARM como el ARM7TDMI tenian dos set de instrucciones, un set instrucciones ARM de 32 bits y un set de instrucciones Thumb de 16 bits. Para trabajar con una u otra había que realizar un cambio de contexto. Con la introducción de la tecnología Thumb-2, el set de instrucciones Thumb fue extendido para soportar una mezcla de instrucciones de 16 bits y de 32 bits. Esto permite realizar todos los procesamientos requeridos sin requerir un cambio de contexto. Con Thumb-2 el ensamblador cuando es posible utiliza instrucciones de 16 bits, por lo cuál se necesita un tamaño de programa más pequeño, lo que genera una mayor densidad de código.
    
3. ¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este tipo de arquitectura?

    En la arquitectura load-store los datos en la memoria para ser procesados, deben cargarse desde la memoria a los registros en el banco de registros, procesarse dentro del procesador y luego volver a escribirse en la memoria, si es necesario. Todo esto utilizando un número de instrucciones separadas. 
    Esta arquitectura no posee instrucciones que modifiquen directamente la memoria.
    
4. ¿Cómo es el mapa de memoria de la familia?
    
    El mapa de memoria de la familia es un único espacio de memoria plano de 4 GB.

5. ¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP?

    Los procesadores Cortex-M están diseñados para soportar sistemas operativos, por eso están disponibles dos stack pointers separados. El MSP es utilizado para el núcleo del sistemas operativo y para el manejo de interrupciones. El PSP es utilizado para las tareas de la aplicación, y cada tarea tiene su propio stack. Esto permite las siguientes ventajas:
    
    * Si se corrompe el stack de una tarea, es probable que el stack utilizado por el kernel del SO y el utilizado por otras tareas se encuentre intacto, lo que mejora la confiabilidad del sistema.
    
    * El espacio de stack para cada tarea solamente necesita cubrir el máximo uso de stack más un nivel de stack frame. Ya que el espacio de stack que se necesita para una ISR y el manejo de interrupciones anidadas se encuentra asignado solamente en el stack principal
    
    * Un SO también puede utilizar la MPU para definir la región del stack que puede usar una tarea de una aplicación. Si ocurre un problema de desbordamiento de stack, la MPU puede activar una excepción de falla MemManage y evitar que la tarea sobrescriba regiones de memoria fuera del espacio de stack asignado para esta tarea.

6. Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y como se conmuta de uno al otro. Describa un ejemplo en el que se pasa del modo privilegiado a no privilegiado y nuevamente a privilegiado.
    
    Los Cortex-M tienen dos estados de operación y dos modos de operación.
    
    Estados de operación 
    --------------------
    * Thumb state: Cuando el procesador está corriendo código de programa. 
    
    * Debug state: Cuando el procesador es detenido (Ej: por el depurador o al llegar a un breakpoint), entra en el modo depuración y detiene la ejecución de instrucciones.
    
    Modos de operación 
    ------------------
    * Thread mode: Cuando está ejecutando código de aplicación normal. Dentro de este modo el procesador puede estar en nivel de acceso privilegiado o no privilegiado. Acceso no privilegiado significa que algunas regiones de memoria son inaccesibles y algunas operaciones no pueden utilizarse. 
    
    * Handler mode: Cuando está ejecutando un manejo de excepción como es una ISR.
    
    El software puede cambiar el procesador en el modo Thread privilegiado al modo de Thread no privilegiado. Sin embargo, no puede volver del modo no privilegiado al modo privilegiado. Para realizar esta operación, el procesador debe utilizar el mecanismo de excepción, es decir pasar a través del modo Handler. 
    
    Por ejemplo por defecto los procesador Cortex-M inicial en modo Thread privilegiado, si en este modo escribo un 1 en el bit 0 del registro CONTROL cambio al modo no privilegiado. La única forma de volver a modo privilegiado o de realizar cualquier cambio que requiera modo privilegiado, es invocar por software a la interrupción SVC (Supervisor Call) utilizando la instrucción de assembler svc. Esta interrupción generada será atendida por la función que defina como SVC_Handler y dentro de la misma puedo borrar el bit 0 del registro CONTROL para volver al modo privilegiado.

7. ¿Qué se entiende por modelo de registros ortogonal? Dé un ejemplo

    En una arquitectura ortogonal cualquier instrucción puede utilizar cualquier registro de la arquitectura como fuente o destino.
    Por ejemplo una instrucción ORR puede operar con cualquier par de registros.
    
8. ¿Qué ventajas presenta el uso de instrucciones de ejecución condicional (IT)? Dé un ejemplo
    
    Evita saltos que rompen el pipeline, lo que permite que la ejecución del código sea más dinámica. Por ejemplo si debo colocar un valor u otro en una variable, pongo las dos instrucciones con una ejecución condicional y según el estado de la flag correspondiente se ejecuta una u otra instrucción.

9. Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault).
    
    Estas 3 excepciones son las únicas que no pueden modificarse su prioridad.
    
    * Reset: cuando el procesador inicia ejecuta un handle de reset. Tiene una prioridad de -3 (La más alta)
    
    * NMI: interrupción no enmascarable. Puede ser generada por un periférico dentro del chip o por una fuente externa. Tiene una prioridad de -2.
    
    * Hardfault: excepción genérica para atender cualquier otro tipo de falta si el handler correspondiente no se encuentra habilitado. Tiene una prioridad de -1.

10. Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado a funciones y su retorno?
    
    * Guardar el temporalmente el estado de los registros cuando una función necesita utilizarlo para el procesamiento de datos. Luego se pueden restaurar al final de la función.
    
    * Guardar variable locales.
    
    * Pasar información a funciones o subrutinas.
    
    * Guardar el estado del procesador y el valor de los registros cuando ocurre una interrupción.
    
    Al comienzo de la llamada a la función, el contenido de algunos de los registros se puede guardar en la pila usando la instrucción PUSH y luego restaurar a sus valores originales al final de la función usando la instrucción POP.

11. Describa la secuencia de reset del microprocesador.

    Después del reinicio y antes de que el procesador comience a ejecutar el programa, los procesadores Cortex-M leen las dos primeras palabras de la memoria. Son el valor inicial del MSP y la dirección del reset handler. Después de esto, el procesador configura el MSP y el contador de programa (PC) con estos valores.
    
12. ¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de los periféricos?

    Los core peripherals son los periféricos que define ARM para la arquitectura de Cortex-M y son estándar en todos los fabricantes. Estos son el SysTick y el NVIC. El resto de los periféricos varia con cada fabricante.

13. ¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo

    En los procesadores Cortex-M cada excepción tiene un nivel de prioridad. Los números más bajos son los de mayor prioridad.
    Las excepciones reset, NMI y Hardfault tienen las prioridades más altas, no modificables, -3,-2 y -1 respectivamente. El resto de las excepciones tiene su prioridad configurable por software mediante registros en el SCB o en el Nested Vectored Interrupt Controller (NVIC), comenzando con el valor 0 hasta el 255.
    
14. ¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta?
    CMSIS o Cortex Microcontroller Software Interface Standard es una capa de abstracción de Hardware para los procesadores Cortex-M que provee ARM. Es un estándar que nos asegura portabilidad entre los distintos fabricantes que deben cumplirlo.

15. Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el microprocesador para atender a la subrutina correspondiente? Explique con un ejemplo
    
    Cuando ocurre una excepción el procesador guarda los registros R0 a R3, R12, Return Adress, PSR y LR en el stack. Luego se ingresa al handler de excepción, se carga LR con un valor especial EXEC_RETURN que no corresponde a una posición valida de memoria. Cuando se ejecuta la instrucción de retorno el procesador identifica que se trata de un retorno de excepción y recupera del stack los registros guardados.
    
17. ¿Cómo cambia la operación de stacking al utilizar la unidad de punto flotante?
    
    Cuando la FPU se encuentra desactivada se guarda en el stack 8 palabras (R0 a R3, R12, Return Adress, PSR y LR), y este proceso demora 12 ciclos de reloj. Cuando la FPU se encuentra activada se guarda además el contexto de la FPU, es decir el registro de estado del FPU FPSCR y los registros S0 a S15. Esto da un total de 26 palabras y 29 ciclos de reloj.
    
16. Explique las características avanzadas de atención a interrupciones: tail chaining y late arrival.
    
    Tail chaining: se da cuando se está ejecutando una interrupción y ocurre otra de igual o mayor prioridad. Al finalizar la ejecución de la primera interrupción no se vuelve al modo Thread, para evitar volver a realizar el stacking, si no que el procesador se mantiene en modo handler y continua ejecutando la segunda interrupción. Para un sistema de memoria sin un estado de espera, el tail-chain tiene una latencia de 6 ciclos de reloj.
    
    Late arrival: cuando el procesador acepta una interrupción empieza a relizar el stacking. Si durante el stacking ocurre un interrupción de mayor prioridad, el procesador la va a atender primero.

17. ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la portabilidad de los sistemas operativos embebidos?

    El SysTick timer es un contador descendente de 24 bits diseñado para generar interrupciones de manera regular. Se puede acceder a sus registros unicamente de modo privilegiado, lo que lo hace ideal para se utilizado como base de tiempo de un RTOS. Forma parte de los core peripherals definidos por ARM lo que favorece la portabilidad. El clock utilizado puede obtenerse de uno de los clocks del core, o de una fuente externa.

18. ¿Qué funciones cumple la unidad de protección de memoria (MPU)?
    
    El MPU es un módulo opcional que pueden incorporar algunos micros, que tiene como función proteger el acceso a la memoria.
    Sus funciones son:
    
    * Proteger el acceso de aplicaciones a zonas de memorias de otras aplicaciones o del kernel.
    * Evitar la ejecución de código en zonas no permitidas (Ej. en la RAM).
    * Prevenir acceso de aplicaciones a periféricos sin los permisos correspondientes.
    
    Si los permisos de accesos son violados ocurre una excepción de HardFault o  de MemManage según la configuración.

19. ¿Cuántas regiones pueden configurarse como máximo? ¿Qué ocurre en caso de haber solapamientos de las regiones? ¿Qué ocurre con las zonas de memoria no cubiertas por las regiones definidas?

    Pueden configurarse como máximo 8 regiones de memoria. En caso de que ocurra un solapamiento de regiones, la región queda configurada con los permisos de la última zona definida. 
    
    El área no cubierta es el área de background y puede no estar permitido el acceso (PRIVDEFENA = 0) o solo permitido en nivel privilegiado (PRIVDEFENA = 1).
    
20. ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto de las excepciones? Dé un ejemplo
    
    PendSV viene de las siglas "Pendable request for System Service", es una excepción utilizada usualmente por un SO en procesos como un cambio de contexto y system calls. Es la excepción de menor prioridad y es interrumpida por todas las demás.

21. ¿Para qué se suele utilizar la excepción SVC? Expliquelo dentro de un marco de un sistema operativo embebido.
    
    La excepción SVC se utiliza con un RTOS donde una tarea de aplicación que se ejecuta sin privilegios puede solicitar servicios del sistema operativo, que se ejecuta con privilegios. El mecanismo de excepción de SVC proporciona el cambio de no privilegiado a privilegiado.

ISA
===
1. ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo
    
    Son letras que se agregan al final de un instrucción para modificar su funcionalidad. Por ejemplo a la instrucción de cargar un registro con un valor ldr, se le puede agregar el sufijo b es decir ldrb para cargar media palabra (16 bits) y completar los bits superiores con 0.

2. ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo
    
    Se utiliza para que según el resultado de la operación se actualicen las flags del registro APSR. Por ejemplo subs r2,1 resta 1 a r2 y actualiza la flag z si el resultado es 0.

3. ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un ejemplo con operaciones con datos de 8 bits.
    
    Las instrucciones de aritmética saturada permiten reducir un valor de 32-bits a un formato más chico, por ejemplo 12 bits, saturando el resultado dentro del rango permitido. Por ejemplo usat r4,8,r4 satura sin signo a la posición 8 es decir a 8 bits.

4. Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos de las funciones? ¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse en la pila antes de ser modificados?

    La interfaz entre assembler y C en el Cortex se define en el documento “ARM Architecture Procedure Call Standard”. Las funciones reciben los argumentos a través de los registros r0 (para arg 0), r1, r2 y r3. r0 se utiliza para devolver el resultado de la función. A partir del registro r5 a 15 deben ser guardados en la pila antes de ser modificados con push {r5-r15} y devueltos al final de la función con un pop {r5-r15}.
    
5. ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un ejemplo.

    SIMD viene de las siglas "Single Instruction Multiple Data". Una instrucción de este tipo permite procesar múltiples datos en una única operación. La aplicación más común es en el procesamiento de audio, donde los cálculos para el canal izquierdo y el canal derecho se pueden realizar al mismo tiempo.
